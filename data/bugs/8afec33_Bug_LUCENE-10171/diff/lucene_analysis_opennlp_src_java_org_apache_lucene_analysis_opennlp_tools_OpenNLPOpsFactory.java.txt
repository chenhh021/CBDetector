diff --git a/lucene/analysis/opennlp/src/java/org/apache/lucene/analysis/opennlp/tools/OpenNLPOpsFactory.java b/lucene/analysis/opennlp/src/java/org/apache/lucene/analysis/opennlp/tools/OpenNLPOpsFactory.java
index 75745bc..7458cfd 100644
--- a/lucene/analysis/opennlp/src/java/org/apache/lucene/analysis/opennlp/tools/OpenNLPOpsFactory.java
+++ b/lucene/analysis/opennlp/src/java/org/apache/lucene/analysis/opennlp/tools/OpenNLPOpsFactory.java
@@ -17,15 +17,12 @@
 
 package org.apache.lucene.analysis.opennlp.tools;
 
-import java.io.ByteArrayInputStream;
 import java.io.IOException;
 import java.io.InputStream;
-import java.io.InputStreamReader;
-import java.io.Reader;
-import java.nio.charset.StandardCharsets;
 import java.util.Map;
 import java.util.concurrent.ConcurrentHashMap;
 import opennlp.tools.chunker.ChunkerModel;
+import opennlp.tools.lemmatizer.DictionaryLemmatizer;
 import opennlp.tools.lemmatizer.LemmatizerModel;
 import opennlp.tools.namefind.TokenNameFinderModel;
 import opennlp.tools.postag.POSModel;
@@ -45,7 +42,7 @@
   private static ConcurrentHashMap<String, ChunkerModel> chunkerModels = new ConcurrentHashMap<>();
   private static Map<String, TokenNameFinderModel> nerModels = new ConcurrentHashMap<>();
   private static Map<String, LemmatizerModel> lemmatizerModels = new ConcurrentHashMap<>();
-  private static Map<String, String> lemmaDictionaries = new ConcurrentHashMap<>();
+  private static Map<String, DictionaryLemmatizer> lemmaDictionaries = new ConcurrentHashMap<>();
 
   public static NLPSentenceDetectorOp getSentenceDetector(String modelName) throws IOException {
     if (modelName != null) {
@@ -144,36 +141,25 @@
       throws IOException {
     assert dictionaryFile != null || lemmatizerModelFile != null
         : "At least one parameter must be non-null";
-    InputStream dictionaryInputStream = null;
+    DictionaryLemmatizer dictionaryLemmatizer = null;
     if (dictionaryFile != null) {
-      String dictionary = lemmaDictionaries.get(dictionaryFile);
-      dictionaryInputStream = new ByteArrayInputStream(dictionary.getBytes(StandardCharsets.UTF_8));
+      dictionaryLemmatizer = lemmaDictionaries.get(dictionaryFile);
     }
     LemmatizerModel lemmatizerModel =
         lemmatizerModelFile == null ? null : lemmatizerModels.get(lemmatizerModelFile);
-    return new NLPLemmatizerOp(dictionaryInputStream, lemmatizerModel);
+    return new NLPLemmatizerOp(dictionaryLemmatizer, lemmatizerModel);
   }
 
-  public static String getLemmatizerDictionary(String dictionaryFile, ResourceLoader loader)
-      throws IOException {
-    String dictionary = lemmaDictionaries.get(dictionaryFile);
-    if (dictionary == null) {
-      try (Reader reader =
-          new InputStreamReader(loader.openResource(dictionaryFile), StandardCharsets.UTF_8)) {
-        StringBuilder builder = new StringBuilder();
-        char[] chars = new char[8092];
-        int numRead = 0;
-        do {
-          numRead = reader.read(chars, 0, chars.length);
-          if (numRead > 0) {
-            builder.append(chars, 0, numRead);
-          }
-        } while (numRead > 0);
-        dictionary = builder.toString();
-        lemmaDictionaries.put(dictionaryFile, dictionary);
-      }
+  public static DictionaryLemmatizer getLemmatizerDictionary(
+      String dictionaryFile, ResourceLoader loader) throws IOException {
+    DictionaryLemmatizer dictionaryLemmatizer = lemmaDictionaries.get(dictionaryFile);
+    if (dictionaryLemmatizer == null) {
+      // TODO: OpenNLP's DictionaryLemmatizer hardcodes the target platform's system encoding,
+      // so it needs to match the encoding of the dictionary file.
+      dictionaryLemmatizer = new DictionaryLemmatizer(loader.openResource(dictionaryFile));
+      lemmaDictionaries.put(dictionaryFile, dictionaryLemmatizer);
     }
-    return dictionary;
+    return dictionaryLemmatizer;
   }
 
   public static LemmatizerModel getLemmatizerModel(String modelName, ResourceLoader loader)
