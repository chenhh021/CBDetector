diff --git a/lucene/queries/src/test/org/apache/lucene/queries/intervals/TestIntervalQuery.java b/lucene/queries/src/test/org/apache/lucene/queries/intervals/TestIntervalQuery.java
index 190b4a1..1275c1d 100644
--- a/lucene/queries/src/test/org/apache/lucene/queries/intervals/TestIntervalQuery.java
+++ b/lucene/queries/src/test/org/apache/lucene/queries/intervals/TestIntervalQuery.java
@@ -17,6 +17,11 @@
 
 package org.apache.lucene.queries.intervals;
 
+import static org.apache.lucene.queries.intervals.Intervals.containing;
+import static org.apache.lucene.queries.intervals.Intervals.extend;
+import static org.apache.lucene.queries.intervals.Intervals.or;
+import static org.apache.lucene.queries.intervals.Intervals.term;
+
 import java.io.IOException;
 import org.apache.lucene.document.Document;
 import org.apache.lucene.document.Field;
@@ -50,9 +55,9 @@
             random(),
             directory,
             newIndexWriterConfig(new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));
-    for (int i = 0; i < docFields.length; i++) {
+    for (String docField : docFields) {
       Document doc = new Document();
-      doc.add(newTextField(field, docFields[i], Field.Store.YES));
+      doc.add(newTextField(field, docField, Field.Store.YES));
       writer.addDocument(doc);
     }
     reader = writer.getReader();
@@ -67,7 +72,7 @@
     super.tearDown();
   }
 
-  private String[] docFields = {
+  private final String[] docFields = {
     "w1 w2 w3 w4 w5",
     "w1 w3 w2 w3",
     "w1 xx w2 w4 yy w3",
@@ -168,7 +173,7 @@
     assertTrue(explain.toString().contains(field));
   }
 
-  public void testNullConstructorArgs() throws IOException {
+  public void testNullConstructorArgs() {
     expectThrows(NullPointerException.class, () -> new IntervalQuery(null, Intervals.term("z")));
     expectThrows(NullPointerException.class, () -> new IntervalQuery("field", null));
   }
@@ -423,4 +428,11 @@
     Query q = new IntervalQuery(field, Intervals.prefix(new BytesRef("å ´")));
     checkHits(q, new int[] {11});
   }
+
+  public void testExtendDisjunctions() throws IOException {
+    Query q =
+        new IntervalQuery(
+            field, or(term("XXX"), containing(extend(term("message"), 0, 10), term("intend"))));
+    checkHits(q, new int[] {});
+  }
 }
