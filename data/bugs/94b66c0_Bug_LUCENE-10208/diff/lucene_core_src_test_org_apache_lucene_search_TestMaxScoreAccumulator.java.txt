diff --git a/lucene/core/src/test/org/apache/lucene/search/TestMaxScoreAccumulator.java b/lucene/core/src/test/org/apache/lucene/search/TestMaxScoreAccumulator.java
index d53a2a2..28bec9c 100644
--- a/lucene/core/src/test/org/apache/lucene/search/TestMaxScoreAccumulator.java
+++ b/lucene/core/src/test/org/apache/lucene/search/TestMaxScoreAccumulator.java
@@ -23,21 +23,29 @@
   public void testSimple() {
     MaxScoreAccumulator acc = new MaxScoreAccumulator();
     acc.accumulate(0, 0f);
+    assertEquals(0f, acc.get().score, 0);
+    assertEquals(0, acc.get().docBase, 0);
     acc.accumulate(10, 0f);
     assertEquals(0f, acc.get().score, 0);
-    assertEquals(10, acc.get().docID, 0);
+    assertEquals(0, acc.get().docBase, 0);
     acc.accumulate(100, 1000f);
     assertEquals(1000f, acc.get().score, 0);
-    assertEquals(100, acc.get().docID, 0);
+    assertEquals(100, acc.get().docBase, 0);
     acc.accumulate(1000, 5f);
     assertEquals(1000f, acc.get().score, 0);
-    assertEquals(100, acc.get().docID, 0);
+    assertEquals(100, acc.get().docBase, 0);
     acc.accumulate(99, 1000f);
     assertEquals(1000f, acc.get().score, 0);
-    assertEquals(100, acc.get().docID, 0);
-    acc.accumulate(0, 1001f);
+    assertEquals(99, acc.get().docBase, 0);
+    acc.accumulate(1000, 1001f);
     assertEquals(1001f, acc.get().score, 0);
-    assertEquals(0, acc.get().docID, 0);
+    assertEquals(1000, acc.get().docBase, 0);
+    acc.accumulate(10, 1001f);
+    assertEquals(1001f, acc.get().score, 0);
+    assertEquals(10, acc.get().docBase, 0);
+    acc.accumulate(100, 1001f);
+    assertEquals(1001f, acc.get().score, 0);
+    assertEquals(10, acc.get().docBase, 0);
   }
 
   public void testRandom() {
@@ -48,7 +56,7 @@
     for (int i = 0; i < numDocs; i++) {
       MaxScoreAccumulator.DocAndScore res =
           new MaxScoreAccumulator.DocAndScore(random().nextInt(maxDocs), random().nextFloat());
-      acc.accumulate(res.docID, res.score);
+      acc.accumulate(res.docBase, res.score);
       if (res.compareTo(max) > 0) {
         max = res;
       }
