diff --git a/lucene/core/src/java/org/apache/lucene/search/MaxScoreAccumulator.java b/lucene/core/src/java/org/apache/lucene/search/MaxScoreAccumulator.java
index fa66238..b0f60f8 100644
--- a/lucene/core/src/java/org/apache/lucene/search/MaxScoreAccumulator.java
+++ b/lucene/core/src/java/org/apache/lucene/search/MaxScoreAccumulator.java
@@ -26,7 +26,7 @@
   static final int DEFAULT_INTERVAL = 0x3ff;
 
   // scores are always positive
-  final LongAccumulator acc = new LongAccumulator(Long::max, Long.MIN_VALUE);
+  final LongAccumulator acc = new LongAccumulator(MaxScoreAccumulator::maxEncode, Long.MIN_VALUE);
 
   // non-final and visible for tests
   long modInterval;
@@ -35,9 +35,26 @@
     this.modInterval = DEFAULT_INTERVAL;
   }
 
-  void accumulate(int docID, float score) {
-    assert docID >= 0 && score >= 0;
-    long encode = (((long) Float.floatToIntBits(score)) << 32) | docID;
+  /**
+   * Return the max encoded DocAndScore in a way that is consistent with {@link
+   * DocAndScore#compareTo}.
+   */
+  private static long maxEncode(long v1, long v2) {
+    float score1 = Float.intBitsToFloat((int) (v1 >> 32));
+    float score2 = Float.intBitsToFloat((int) (v2 >> 32));
+    int cmp = Float.compare(score1, score2);
+    if (cmp == 0) {
+      // tie-break on the minimum doc base
+      return (int) v1 < (int) v2 ? v1 : v2;
+    } else if (cmp > 0) {
+      return v1;
+    }
+    return v2;
+  }
+
+  void accumulate(int docBase, float score) {
+    assert docBase >= 0 && score >= 0;
+    long encode = (((long) Float.floatToIntBits(score)) << 32) | docBase;
     acc.accumulate(encode);
   }
 
@@ -47,16 +64,16 @@
       return null;
     }
     float score = Float.intBitsToFloat((int) (value >> 32));
-    int docID = (int) value;
-    return new DocAndScore(docID, score);
+    int docBase = (int) value;
+    return new DocAndScore(docBase, score);
   }
 
   static class DocAndScore implements Comparable<DocAndScore> {
-    final int docID;
+    final int docBase;
     final float score;
 
-    DocAndScore(int docID, float score) {
-      this.docID = docID;
+    DocAndScore(int docBase, float score) {
+      this.docBase = docBase;
       this.score = score;
     }
 
@@ -64,7 +81,14 @@
     public int compareTo(DocAndScore o) {
       int cmp = Float.compare(score, o.score);
       if (cmp == 0) {
-        return Integer.compare(docID, o.docID);
+        // tie-break on the minimum doc base
+        // For a given minimum competitive score, we want to know the first segment
+        // where this score occurred, hence the reverse order here.
+        // On segments with a lower docBase, any document whose score is greater
+        // than or equal to this score would be competitive, while on segments with a
+        // higher docBase, documents need to have a strictly greater score to be
+        // competitive since we tie break on doc ID.
+        return Integer.compare(o.docBase, docBase);
       }
       return cmp;
     }
@@ -74,17 +98,17 @@
       if (this == o) return true;
       if (o == null || getClass() != o.getClass()) return false;
       DocAndScore result = (DocAndScore) o;
-      return docID == result.docID && Float.compare(result.score, score) == 0;
+      return docBase == result.docBase && Float.compare(result.score, score) == 0;
     }
 
     @Override
     public int hashCode() {
-      return Objects.hash(docID, score);
+      return Objects.hash(docBase, score);
     }
 
     @Override
     public String toString() {
-      return "DocAndScore{" + "docID=" + docID + ", score=" + score + '}';
+      return "DocAndScore{" + "docBase=" + docBase + ", score=" + score + '}';
     }
   }
 }
