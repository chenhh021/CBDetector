diff --git a/lucene/core/src/java/org/apache/lucene/search/MaxScoreSumPropagator.java b/lucene/core/src/java/org/apache/lucene/search/MaxScoreSumPropagator.java
index 417b751..1557cd9 100644
--- a/lucene/core/src/java/org/apache/lucene/search/MaxScoreSumPropagator.java
+++ b/lucene/core/src/java/org/apache/lucene/search/MaxScoreSumPropagator.java
@@ -128,25 +128,40 @@
     }
   }
 
-  /** Return the minimum score that a Scorer must produce in order for a hit to be competitive. */
+  /**
+   * Return the minimum score that a Scorer must produce in order for a hit to be competitive.
+   *
+   * <p>The way that boolean queries combine scores of their sub clauses together is by summing up
+   * the float scores into a double and finally casting back that double back to a float. This
+   * method undoes this operation by taking the float score sum and subtracting the sum of other
+   * scores as a double as a first approximation of the minimum score that this clause must have.
+   */
   private float getMinCompetitiveScore(float minScoreSum, double sumOfOtherMaxScores) {
     assert numClauses > 0;
-    if (minScoreSum <= sumOfOtherMaxScores) {
-      return 0f;
-    }
 
     // We need to find a value 'minScore' so that 'minScore + sumOfOtherMaxScores <= minScoreSum'
     // TODO: is there an efficient way to find the greatest value that meets this requirement?
     float minScore = (float) (minScoreSum - sumOfOtherMaxScores);
-    int iters = 0;
-    while (scoreSumUpperBound(minScore + sumOfOtherMaxScores) > minScoreSum) {
+    for (int iter = 0;
+        minScore > 0 && scoreSumUpperBound(minScore + sumOfOtherMaxScores) > minScoreSum;
+        ++iter) {
       // Important: use ulp of minScoreSum and not minScore to make sure that we
       // converge quickly.
       minScore -= Math.ulp(minScoreSum);
       // this should converge in at most two iterations:
       //  - one because of the subtraction rounding error
       //  - one because of the error introduced by sumUpperBound
-      assert ++iters <= 2 : iters;
+      if (iter > 2) {
+        throw new IllegalStateException(
+            "Could not compute a minimum score for minScore="
+                + +minScore
+                + ", minScoreSum="
+                + minScoreSum
+                + ", sumOfOtherMaxScores="
+                + sumOfOtherMaxScores
+                + ", numClauses="
+                + numClauses);
+      }
     }
     return Math.max(minScore, 0f);
   }
