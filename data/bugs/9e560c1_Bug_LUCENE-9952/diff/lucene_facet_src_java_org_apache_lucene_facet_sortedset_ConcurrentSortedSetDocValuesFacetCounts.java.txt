diff --git a/lucene/facet/src/java/org/apache/lucene/facet/sortedset/ConcurrentSortedSetDocValuesFacetCounts.java b/lucene/facet/src/java/org/apache/lucene/facet/sortedset/ConcurrentSortedSetDocValuesFacetCounts.java
index 0a2b843..928da66 100644
--- a/lucene/facet/src/java/org/apache/lucene/facet/sortedset/ConcurrentSortedSetDocValuesFacetCounts.java
+++ b/lucene/facet/src/java/org/apache/lucene/facet/sortedset/ConcurrentSortedSetDocValuesFacetCounts.java
@@ -102,14 +102,16 @@
       throw new IllegalArgumentException("topN must be > 0 (got: " + topN + ")");
     }
 
-    if (stateConfig.getDimConfig(dim).hierarchical) {
+    FacetsConfig.DimConfig dimConfig = stateConfig.getDimConfig(dim);
+
+    if (dimConfig.hierarchical) {
       int pathOrd = (int) dv.lookupTerm(new BytesRef(FacetsConfig.pathToString(dim, path)));
       if (pathOrd < 0) {
         // path was never indexed
         return null;
       }
       SortedSetDocValuesReaderState.DimTree dimTree = state.getDimTree(dim);
-      return getDim(dim, path, pathOrd, dimTree.iterator(pathOrd), topN);
+      return getPathResult(dimConfig, dim, path, pathOrd, dimTree.iterator(pathOrd), topN);
     } else {
       if (path.length > 0) {
         throw new IllegalArgumentException(
@@ -120,12 +122,25 @@
         // means dimension was never indexed
         return null;
       }
-      return getDim(dim, null, -1, ordRange.iterator(), topN);
+      int dimOrd = ordRange.start;
+      PrimitiveIterator.OfInt childIt = ordRange.iterator();
+      if (dimConfig.multiValued && dimConfig.requireDimCount) {
+        // If the dim is multi-valued and requires dim counts, we know we've explicitly indexed
+        // the dimension and we need to skip past it so the iterator is positioned on the first
+        // child:
+        childIt.next();
+      }
+      return getPathResult(dimConfig, dim, null, -dimOrd, childIt, topN);
     }
   }
 
-  private FacetResult getDim(
-      String dim, String[] path, int pathOrd, PrimitiveIterator.OfInt childOrds, int topN)
+  private FacetResult getPathResult(
+      FacetsConfig.DimConfig dimConfig,
+      String dim,
+      String[] path,
+      int pathOrd,
+      PrimitiveIterator.OfInt childOrds,
+      int topN)
       throws IOException {
 
     TopOrdAndIntQueue q = null;
@@ -174,11 +189,17 @@
       labelValues[i] = new LabelAndValue(parts[parts.length - 1], ordAndValue.value);
     }
 
-    if (pathOrd == -1) {
-      // not hierarchical facet
+    if (dimConfig.hierarchical == false) {
+      // see if dimCount is actually reliable or needs to be reset
+      if (dimConfig.multiValued) {
+        if (dimConfig.requireDimCount) {
+          dimCount = counts.get(pathOrd);
+        } else {
+          dimCount = -1; // dimCount is in accurate at this point, so set it to -1
+        }
+      }
       return new FacetResult(dim, emptyPath, dimCount, labelValues, childCount);
     } else {
-      // hierarchical facet
       return new FacetResult(dim, path, counts.get(pathOrd), labelValues, childCount);
     }
   }
@@ -393,15 +414,25 @@
 
     List<FacetResult> results = new ArrayList<>();
     for (String dim : state.getDims()) {
-      if (stateConfig.getDimConfig(dim).hierarchical) {
+      FacetsConfig.DimConfig dimConfig = stateConfig.getDimConfig(dim);
+      if (dimConfig.hierarchical) {
         SortedSetDocValuesReaderState.DimTree dimTree = state.getDimTree(dim);
-        FacetResult fr = getDim(dim, emptyPath, dimTree.dimStartOrd, dimTree.iterator(), topN);
+        int dimOrd = dimTree.dimStartOrd;
+        FacetResult fr = getPathResult(dimConfig, dim, emptyPath, dimOrd, dimTree.iterator(), topN);
         if (fr != null) {
           results.add(fr);
         }
       } else {
         OrdRange ordRange = state.getOrdRange(dim);
-        FacetResult fr = getDim(dim, emptyPath, -1, ordRange.iterator(), topN);
+        int dimOrd = ordRange.start;
+        PrimitiveIterator.OfInt childIt = ordRange.iterator();
+        if (dimConfig.multiValued && dimConfig.requireDimCount) {
+          // If the dim is multi-valued and requires dim counts, we know we've explicitly indexed
+          // the dimension and we need to skip past it so the iterator is positioned on the first
+          // child:
+          childIt.next();
+        }
+        FacetResult fr = getPathResult(dimConfig, dim, emptyPath, dimOrd, childIt, topN);
         if (fr != null) {
           results.add(fr);
         }
