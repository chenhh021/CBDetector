diff --git a/lucene/suggest/src/test/org/apache/lucene/search/suggest/fst/TestWFSTCompletion.java b/lucene/suggest/src/test/org/apache/lucene/search/suggest/fst/TestWFSTCompletion.java
index 460bef8..a61e627 100644
--- a/lucene/suggest/src/test/org/apache/lucene/search/suggest/fst/TestWFSTCompletion.java
+++ b/lucene/suggest/src/test/org/apache/lucene/search/suggest/fst/TestWFSTCompletion.java
@@ -20,6 +20,7 @@
 import org.apache.lucene.search.suggest.Input;
 import org.apache.lucene.search.suggest.InputArrayIterator;
 import org.apache.lucene.search.suggest.Lookup.LookupResult;
+import org.apache.lucene.search.suggest.SuggestRebuildTestUtil;
 import org.apache.lucene.store.Directory;
 import org.apache.lucene.tests.util.LuceneTestCase;
 import org.apache.lucene.tests.util.TestUtil;
@@ -80,6 +81,41 @@
     tempDir.close();
   }
 
+  public void testLookupsDuringReBuild() throws Exception {
+    Directory tempDir = getDirectory();
+    WFSTCompletionLookup suggester = new WFSTCompletionLookup(tempDir, "wfst");
+    SuggestRebuildTestUtil.testLookupsDuringReBuild(
+        suggester,
+        Arrays.asList(new Input("foo", 50), new Input("bar", 10), new Input("barbar", 12)),
+        s -> {
+          assertEquals(3, s.getCount());
+          // top 3, but only 2 found
+          List<LookupResult> results =
+              s.lookup(TestUtil.stringToCharSequence("ba", random()), false, 3);
+          assertEquals(2, results.size());
+          assertEquals("barbar", results.get(0).key.toString());
+          assertEquals(12, results.get(0).value);
+          assertEquals("bar", results.get(1).key.toString());
+          assertEquals(10, results.get(1).value);
+        },
+        Arrays.asList(new Input("barbara", 6)),
+        s -> {
+          assertEquals(4, s.getCount());
+          // top 3
+          List<LookupResult> results =
+              s.lookup(TestUtil.stringToCharSequence("ba", random()), false, 3);
+          assertEquals(3, results.size());
+          assertEquals("barbar", results.get(0).key.toString());
+          assertEquals(12, results.get(0).value);
+          assertEquals("bar", results.get(1).key.toString());
+          assertEquals(10, results.get(1).value);
+          assertEquals("barbara", results.get(2).key.toString());
+          assertEquals(6, results.get(2).value);
+        });
+
+    tempDir.close();
+  }
+
   public void testExactFirst() throws Exception {
 
     Directory tempDir = getDirectory();
