diff --git a/lucene/suggest/src/java/org/apache/lucene/search/suggest/fst/FSTCompletionLookup.java b/lucene/suggest/src/java/org/apache/lucene/search/suggest/fst/FSTCompletionLookup.java
index c76824b..9d91f32 100644
--- a/lucene/suggest/src/java/org/apache/lucene/search/suggest/fst/FSTCompletionLookup.java
+++ b/lucene/suggest/src/java/org/apache/lucene/search/suggest/fst/FSTCompletionLookup.java
@@ -98,7 +98,7 @@
   private FSTCompletion normalCompletion;
 
   /** Number of entries the lookup was built with */
-  private long count = 0;
+  private volatile long count = 0;
 
   /** This constructor should only be used to read a previously saved suggester. */
   public FSTCompletionLookup() {
@@ -171,7 +171,6 @@
 
     // Push floats up front before sequences to sort them. For now, assume they are non-negative.
     // If negative floats are allowed some trickery needs to be done to find their byte order.
-    count = 0;
     try {
       byte[] buffer = new byte[0];
       ByteArrayDataOutput output = new ByteArrayDataOutput(buffer);
@@ -210,6 +209,7 @@
       int previousScore = 0;
       ByteArrayDataInput input = new ByteArrayDataInput();
       BytesRef tmp2 = new BytesRef();
+      long newCount = 0;
       while (true) {
         BytesRef scratch = reader.next();
         if (scratch == null) {
@@ -234,13 +234,14 @@
         builder.add(tmp2, bucket);
 
         line++;
-        count++;
+        newCount++;
       }
 
       // The two FSTCompletions share the same automaton.
       this.higherWeightsCompletion = builder.build();
       this.normalCompletion =
           new FSTCompletion(higherWeightsCompletion.getFST(), false, exactMatchFirst);
+      this.count = newCount;
 
     } finally {
       IOUtils.closeWhileHandlingException(reader, writer, externalSorter);
