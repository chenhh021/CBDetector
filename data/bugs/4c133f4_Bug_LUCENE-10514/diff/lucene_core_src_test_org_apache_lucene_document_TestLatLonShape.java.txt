diff --git a/lucene/core/src/test/org/apache/lucene/document/TestLatLonShape.java b/lucene/core/src/test/org/apache/lucene/document/TestLatLonShape.java
index 355b681..1e4caa1 100644
--- a/lucene/core/src/test/org/apache/lucene/document/TestLatLonShape.java
+++ b/lucene/core/src/test/org/apache/lucene/document/TestLatLonShape.java
@@ -22,6 +22,7 @@
 import static org.apache.lucene.geo.GeoEncodingUtils.encodeLongitude;
 
 import com.carrotsearch.randomizedtesting.generators.RandomNumbers;
+import java.io.IOException;
 import org.apache.lucene.document.ShapeField.QueryRelation;
 import org.apache.lucene.geo.Circle;
 import org.apache.lucene.geo.Component2D;
@@ -915,24 +916,52 @@
     IOUtils.close(r, dir);
   }
 
-  public void testContainsIndexedGeometryCollection() throws Exception {
-    Directory dir = newDirectory();
-    RandomIndexWriter w = new RandomIndexWriter(random(), dir);
+  public void testContainsGeometryCollectionIntersectsPoint() throws Exception {
     Polygon polygon =
         new Polygon(
             new double[] {-64, -64, 64, 64, -64}, new double[] {-132, 132, 132, -132, -132});
-    Field[] polygonFields = LatLonShape.createIndexableFields(FIELDNAME, polygon);
-    // POINT(5, 5) inside the indexed polygon
-    Field[] pointFields = LatLonShape.createIndexableFields(FIELDNAME, 5, 5);
+    doTestContainsGeometryCollectionIntersects(
+        LatLonShape.createIndexableFields(FIELDNAME, polygon),
+        // point inside the indexed polygon
+        LatLonShape.createIndexableFields(FIELDNAME, 5, 5));
+  }
+
+  public void testContainsGeometryCollectionIntersectsLine() throws Exception {
+    Polygon polygon =
+        new Polygon(
+            new double[] {-64, -64, 64, 64, -64}, new double[] {-132, 132, 132, -132, -132});
+    Line line = new Line(new double[] {5, 5.1}, new double[] {5, 5.1});
+    doTestContainsGeometryCollectionIntersects(
+        LatLonShape.createIndexableFields(FIELDNAME, polygon),
+        // Line inside the polygon
+        LatLonShape.createIndexableFields(FIELDNAME, line));
+  }
+
+  public void testContainsGeometryCollectionIntersectsPolygon() throws Exception {
+    Polygon polygon =
+        new Polygon(
+            new double[] {-64, -64, 64, 64, -64}, new double[] {-132, 132, 132, -132, -132});
+    Polygon polygonInside =
+        new Polygon(new double[] {5, 5, 5.1, 5.1, 5}, new double[] {5, 5.1, 5.1, 5, 5});
+    doTestContainsGeometryCollectionIntersects(
+        LatLonShape.createIndexableFields(FIELDNAME, polygon),
+        // this polygon is inside the other polygon
+        LatLonShape.createIndexableFields(FIELDNAME, polygonInside));
+  }
+
+  private void doTestContainsGeometryCollectionIntersects(
+      Field[] containsFields, Field[] intersectsField) throws IOException {
+    Directory dir = newDirectory();
+    RandomIndexWriter w = new RandomIndexWriter(random(), dir);
     int numDocs = random().nextInt(1000);
     // index the same multi geometry many times
     for (int i = 0; i < numDocs; i++) {
       Document doc = new Document();
-      for (Field f : polygonFields) {
+      for (Field f : containsFields) {
         doc.add(f);
       }
       for (int j = 0; j < 10; j++) {
-        for (Field f : pointFields) {
+        for (Field f : intersectsField) {
           doc.add(f);
         }
       }
@@ -946,8 +975,8 @@
     IndexSearcher searcher = newSearcher(reader);
     // Contains is only true if the query geometry is inside a geometry and does not intersect with
     // any other geometry
-    // belonging to the same document. In this case the query geometry contains the indexed polygon
-    // but the point is
+    // belonging to the same document. In this case the query geometry contains the indexed fields
+    // but the intersectsFields are
     // inside the query as well, hence the result is 0.
     Polygon polygonQuery = new Polygon(new double[] {4, 4, 6, 6, 4}, new double[] {4, 6, 6, 4, 4});
     Query query = LatLonShape.newGeometryQuery(FIELDNAME, QueryRelation.CONTAINS, polygonQuery);
