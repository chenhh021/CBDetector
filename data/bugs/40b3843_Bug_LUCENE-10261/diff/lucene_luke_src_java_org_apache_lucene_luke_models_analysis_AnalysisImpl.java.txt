diff --git a/lucene/luke/src/java/org/apache/lucene/luke/models/analysis/AnalysisImpl.java b/lucene/luke/src/java/org/apache/lucene/luke/models/analysis/AnalysisImpl.java
index c63cc10..7c5c001 100644
--- a/lucene/luke/src/java/org/apache/lucene/luke/models/analysis/AnalysisImpl.java
+++ b/lucene/luke/src/java/org/apache/lucene/luke/models/analysis/AnalysisImpl.java
@@ -20,7 +20,6 @@
 import java.io.IOException;
 import java.io.Reader;
 import java.io.StringReader;
-import java.lang.reflect.Modifier;
 import java.net.URL;
 import java.net.URLClassLoader;
 import java.nio.file.FileSystems;
@@ -28,14 +27,12 @@
 import java.nio.file.Path;
 import java.util.ArrayList;
 import java.util.Collection;
-import java.util.Comparator;
 import java.util.Iterator;
 import java.util.LinkedHashMap;
 import java.util.List;
 import java.util.Locale;
 import java.util.Map;
 import java.util.Objects;
-import java.util.Set;
 import java.util.stream.Collectors;
 import org.apache.lucene.analysis.Analyzer;
 import org.apache.lucene.analysis.CharFilterFactory;
@@ -46,7 +43,6 @@
 import org.apache.lucene.analysis.custom.CustomAnalyzer;
 import org.apache.lucene.analysis.tokenattributes.CharTermAttribute;
 import org.apache.lucene.luke.models.LukeException;
-import org.apache.lucene.luke.util.reflection.ClassScanner;
 import org.apache.lucene.util.AttributeImpl;
 import org.apache.lucene.util.AttributeSource;
 import org.apache.lucene.util.IOUtils;
@@ -54,8 +50,6 @@
 /** Default implementation of {@link AnalysisImpl} */
 public final class AnalysisImpl implements Analysis {
 
-  private List<Class<? extends Analyzer>> presetAnalyzerTypes;
-
   private Analyzer analyzer;
 
   @Override
@@ -85,25 +79,6 @@
   }
 
   @Override
-  public Collection<Class<? extends Analyzer>> getPresetAnalyzerTypes() {
-    if (Objects.isNull(presetAnalyzerTypes)) {
-      List<Class<? extends Analyzer>> types = new ArrayList<>();
-      for (Class<? extends Analyzer> clazz : getInstantiableSubTypesBuiltIn(Analyzer.class)) {
-        try {
-          // add to presets if no args constructor is available
-          clazz.getConstructor();
-          types.add(clazz);
-        } catch (
-            @SuppressWarnings("unused")
-            NoSuchMethodException e) {
-        }
-      }
-      presetAnalyzerTypes = List.copyOf(types);
-    }
-    return presetAnalyzerTypes;
-  }
-
-  @Override
   public Collection<String> getAvailableCharFilters() {
     return CharFilterFactory.availableCharFilters().stream().sorted().collect(Collectors.toList());
   }
@@ -120,17 +95,6 @@
         .collect(Collectors.toList());
   }
 
-  private <T> List<Class<? extends T>> getInstantiableSubTypesBuiltIn(Class<T> superType) {
-    ClassScanner scanner =
-        new ClassScanner("org.apache.lucene.analysis", getClass().getClassLoader());
-    Set<Class<? extends T>> types = scanner.scanSubTypes(superType);
-    return types.stream()
-        .filter(type -> !Modifier.isAbstract(type.getModifiers()))
-        .filter(type -> !type.getSimpleName().startsWith("Mock"))
-        .sorted(Comparator.comparing(Class::getName))
-        .collect(Collectors.toList());
-  }
-
   @Override
   public List<Token> analyze(String text) {
     Objects.requireNonNull(text);
