diff --git a/lucene/queries/src/java/org/apache/lucene/queries/intervals/OrderedIntervalsSource.java b/lucene/queries/src/java/org/apache/lucene/queries/intervals/OrderedIntervalsSource.java
index d784a44..a747286 100644
--- a/lucene/queries/src/java/org/apache/lucene/queries/intervals/OrderedIntervalsSource.java
+++ b/lucene/queries/src/java/org/apache/lucene/queries/intervals/OrderedIntervalsSource.java
@@ -24,7 +24,7 @@
 import java.util.Objects;
 import java.util.stream.Collectors;
 
-class OrderedIntervalsSource extends ConjunctionIntervalsSource {
+class OrderedIntervalsSource extends MinimizingConjunctionIntervalsSource {
 
   static IntervalsSource build(List<IntervalsSource> sources) {
     if (sources.size() == 1) {
@@ -69,12 +69,12 @@
   }
 
   private OrderedIntervalsSource(List<IntervalsSource> sources) {
-    super(sources, true);
+    super(sources);
   }
 
   @Override
-  protected IntervalIterator combine(List<IntervalIterator> iterators) {
-    return new OrderedIntervalIterator(iterators);
+  protected IntervalIterator combine(List<IntervalIterator> iterators, MatchCallback onMatch) {
+    return new OrderedIntervalIterator(iterators, onMatch);
   }
 
   @Override
@@ -114,9 +114,11 @@
 
     int start = -1, end = -1, i;
     int slop;
+    final MatchCallback onMatch;
 
-    private OrderedIntervalIterator(List<IntervalIterator> subIntervals) {
+    private OrderedIntervalIterator(List<IntervalIterator> subIntervals, MatchCallback onMatch) {
       super(subIntervals);
+      this.onMatch = onMatch;
     }
 
     @Override
@@ -161,6 +163,7 @@
         for (IntervalIterator subIterator : subIterators) {
           slop -= subIterator.width();
         }
+        onMatch.onMatch();
         lastStart = subIterators.get(subIterators.size() - 1).start();
         i = 1;
         if (subIterators.get(0).nextInterval() == IntervalIterator.NO_MORE_INTERVALS) {
