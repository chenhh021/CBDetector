diff --git a/lucene/queries/src/java/org/apache/lucene/queries/intervals/MinimizingConjunctionMatchesIterator.java b/lucene/queries/src/java/org/apache/lucene/queries/intervals/ConjunctionMatchesIterator.java
similarity index 63%
rename from lucene/queries/src/java/org/apache/lucene/queries/intervals/MinimizingConjunctionMatchesIterator.java
rename to lucene/queries/src/java/org/apache/lucene/queries/intervals/ConjunctionMatchesIterator.java
index 8feda2a..311fdd4 100644
--- a/lucene/queries/src/java/org/apache/lucene/queries/intervals/MinimizingConjunctionMatchesIterator.java
+++ b/lucene/queries/src/java/org/apache/lucene/queries/intervals/ConjunctionMatchesIterator.java
@@ -20,23 +20,21 @@
 import java.io.IOException;
 import java.util.ArrayList;
 import java.util.List;
+import org.apache.lucene.search.FilterMatchesIterator;
 import org.apache.lucene.search.MatchesIterator;
 import org.apache.lucene.search.MatchesUtils;
 import org.apache.lucene.search.Query;
 
-class MinimizingConjunctionMatchesIterator implements IntervalMatchesIterator {
+class ConjunctionMatchesIterator implements IntervalMatchesIterator {
 
   final IntervalIterator iterator;
-  private final List<CachingMatchesIterator> subs = new ArrayList<>();
-  private boolean cached = true;
+  final List<? extends IntervalMatchesIterator> subs;
+  boolean cached = true;
 
-  MinimizingConjunctionMatchesIterator(
-      IntervalIterator iterator, List<IntervalMatchesIterator> subs) {
+  ConjunctionMatchesIterator(
+      IntervalIterator iterator, List<? extends IntervalMatchesIterator> subs) {
     this.iterator = iterator;
-    for (MatchesIterator mi : subs) {
-      assert mi instanceof CachingMatchesIterator;
-      this.subs.add((CachingMatchesIterator) mi);
-    }
+    this.subs = subs;
   }
 
   @Override
@@ -61,24 +59,40 @@
   @Override
   public int startOffset() throws IOException {
     int start = Integer.MAX_VALUE;
-    int endPos = endPosition();
-    for (CachingMatchesIterator s : subs) {
-      start = Math.min(start, s.startOffset(endPos));
+    for (MatchesIterator s : subs) {
+      start = Math.min(start, s.startOffset());
     }
     return start;
   }
 
   @Override
   public int endOffset() throws IOException {
-    int end = 0;
-    int endPos = endPosition();
-    for (CachingMatchesIterator s : subs) {
-      end = Math.max(end, s.endOffset(endPos));
+    int end = -1;
+    for (MatchesIterator s : subs) {
+      end = Math.max(end, s.endOffset());
     }
     return end;
   }
 
   @Override
+  public MatchesIterator getSubMatches() throws IOException {
+    List<MatchesIterator> subMatches = new ArrayList<>();
+    for (MatchesIterator mi : subs) {
+      MatchesIterator sub = mi.getSubMatches();
+      if (sub == null) {
+        sub = new SingletonMatchesIterator(mi);
+      }
+      subMatches.add(sub);
+    }
+    return MatchesUtils.disjunction(subMatches);
+  }
+
+  @Override
+  public Query getQuery() {
+    throw new UnsupportedOperationException();
+  }
+
+  @Override
   public int gaps() {
     return iterator.gaps();
   }
@@ -88,18 +102,20 @@
     return iterator.width();
   }
 
-  @Override
-  public MatchesIterator getSubMatches() throws IOException {
-    List<MatchesIterator> mis = new ArrayList<>();
-    int endPos = endPosition();
-    for (CachingMatchesIterator s : subs) {
-      mis.add(s.getSubMatches(endPos));
-    }
-    return MatchesUtils.disjunction(mis);
-  }
+  static class SingletonMatchesIterator extends FilterMatchesIterator {
 
-  @Override
-  public Query getQuery() {
-    return null;
+    boolean exhausted = false;
+
+    SingletonMatchesIterator(MatchesIterator in) {
+      super(in);
+    }
+
+    @Override
+    public boolean next() {
+      if (exhausted) {
+        return false;
+      }
+      return exhausted = true;
+    }
   }
 }
