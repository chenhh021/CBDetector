diff --git a/lucene/queries/src/java/org/apache/lucene/queries/intervals/CachingMatchesIterator.java b/lucene/queries/src/java/org/apache/lucene/queries/intervals/CachingMatchesIterator.java
index 37da1ac..cc90ca5 100644
--- a/lucene/queries/src/java/org/apache/lucene/queries/intervals/CachingMatchesIterator.java
+++ b/lucene/queries/src/java/org/apache/lucene/queries/intervals/CachingMatchesIterator.java
@@ -25,7 +25,6 @@
 
 class CachingMatchesIterator extends FilterMatchesIterator implements IntervalMatchesIterator {
 
-  private boolean positioned = false;
   private int[] posAndOffsets = new int[4 * 4];
   private Query[] matchingQueries = new Query[4];
   private int count = 0;
@@ -34,7 +33,7 @@
     super(in);
   }
 
-  private void cache() throws IOException {
+  void cache() throws IOException {
     count = 0;
     MatchesIterator mi = in.getSubMatches();
     if (mi == null) {
@@ -62,32 +61,25 @@
 
   @Override
   public boolean next() throws IOException {
-    if (positioned == false) {
-      positioned = true;
-    } else {
-      cache();
-    }
     return in.next();
   }
 
-  int startOffset(int endPos) throws IOException {
-    if (endPosition() <= endPos) {
-      return in.startOffset();
-    }
+  @Override
+  public int startOffset() throws IOException {
     return posAndOffsets[2];
   }
 
-  int endOffset(int endPos) throws IOException {
-    if (endPosition() <= endPos) {
-      return in.endOffset();
-    }
-    return posAndOffsets[count * 4 + 3];
+  @Override
+  public int endOffset() throws IOException {
+    return posAndOffsets[(count - 1) * 4 + 3];
   }
 
-  MatchesIterator getSubMatches(int endPos) throws IOException {
-    if (endPosition() <= endPos) {
-      cache();
-    }
+  @Override
+  public MatchesIterator getSubMatches() {
+    // We always return a submatches, even if there's only a single
+    // cached submatch, because this way we can return the correct
+    // positions - the positions of the top-level match may have
+    // moved on due to minimization
     return new MatchesIterator() {
 
       int upto = -1;
@@ -131,6 +123,11 @@
   }
 
   @Override
+  public Query getQuery() {
+    return matchingQueries[0];
+  }
+
+  @Override
   public int gaps() {
     return ((IntervalMatchesIterator) in).gaps();
   }
