diff --git a/lucene/core/src/test/org/apache/lucene/search/TestFieldCacheRewriteMethod.java b/lucene/core/src/test/org/apache/lucene/search/TestFieldCacheRewriteMethod.java
index ca78ac3..d48f9a6 100644
--- a/lucene/core/src/test/org/apache/lucene/search/TestFieldCacheRewriteMethod.java
+++ b/lucene/core/src/test/org/apache/lucene/search/TestFieldCacheRewriteMethod.java
@@ -20,6 +20,7 @@
 import org.apache.lucene.index.Term;
 import org.apache.lucene.tests.search.CheckHits;
 import org.apache.lucene.tests.search.QueryUtils;
+import org.apache.lucene.util.automaton.Operations;
 import org.apache.lucene.util.automaton.RegExp;
 
 /** Tests the FieldcacheRewriteMethod with random regular expressions */
@@ -28,11 +29,23 @@
   /** Test fieldcache rewrite against filter rewrite */
   @Override
   protected void assertSame(String regexp) throws IOException {
-    RegexpQuery fieldCache = new RegexpQuery(new Term(fieldName, regexp), RegExp.NONE);
-    fieldCache.setRewriteMethod(new DocValuesRewriteMethod());
+    RegexpQuery fieldCache =
+        new RegexpQuery(
+            new Term(fieldName, regexp),
+            RegExp.NONE,
+            0,
+            name -> null,
+            Operations.DEFAULT_DETERMINIZE_WORK_LIMIT,
+            new DocValuesRewriteMethod());
 
-    RegexpQuery filter = new RegexpQuery(new Term(fieldName, regexp), RegExp.NONE);
-    filter.setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_REWRITE);
+    RegexpQuery filter =
+        new RegexpQuery(
+            new Term(fieldName, regexp),
+            RegExp.NONE,
+            0,
+            name -> null,
+            Operations.DEFAULT_DETERMINIZE_WORK_LIMIT,
+            MultiTermQuery.CONSTANT_SCORE_REWRITE);
 
     TopDocs fieldCacheDocs = searcher1.search(fieldCache, 25);
     TopDocs filterDocs = searcher2.search(filter, 25);
@@ -41,17 +54,43 @@
   }
 
   public void testEquals() throws Exception {
-    RegexpQuery a1 = new RegexpQuery(new Term(fieldName, "[aA]"), RegExp.NONE);
-    RegexpQuery a2 = new RegexpQuery(new Term(fieldName, "[aA]"), RegExp.NONE);
-    RegexpQuery b = new RegexpQuery(new Term(fieldName, "[bB]"), RegExp.NONE);
-    assertEquals(a1, a2);
-    assertFalse(a1.equals(b));
+    {
+      RegexpQuery a1 = new RegexpQuery(new Term(fieldName, "[aA]"), RegExp.NONE);
+      RegexpQuery a2 = new RegexpQuery(new Term(fieldName, "[aA]"), RegExp.NONE);
+      RegexpQuery b = new RegexpQuery(new Term(fieldName, "[bB]"), RegExp.NONE);
+      assertEquals(a1, a2);
+      assertFalse(a1.equals(b));
+      QueryUtils.check(a1);
+    }
 
-    a1.setRewriteMethod(new DocValuesRewriteMethod());
-    a2.setRewriteMethod(new DocValuesRewriteMethod());
-    b.setRewriteMethod(new DocValuesRewriteMethod());
-    assertEquals(a1, a2);
-    assertFalse(a1.equals(b));
-    QueryUtils.check(a1);
+    {
+      RegexpQuery a1 =
+          new RegexpQuery(
+              new Term(fieldName, "[aA]"),
+              RegExp.NONE,
+              0,
+              name -> null,
+              Operations.DEFAULT_DETERMINIZE_WORK_LIMIT,
+              new DocValuesRewriteMethod());
+      RegexpQuery a2 =
+          new RegexpQuery(
+              new Term(fieldName, "[aA]"),
+              RegExp.NONE,
+              0,
+              name -> null,
+              Operations.DEFAULT_DETERMINIZE_WORK_LIMIT,
+              new DocValuesRewriteMethod());
+      RegexpQuery b =
+          new RegexpQuery(
+              new Term(fieldName, "[bB]"),
+              RegExp.NONE,
+              0,
+              name -> null,
+              Operations.DEFAULT_DETERMINIZE_WORK_LIMIT,
+              new DocValuesRewriteMethod());
+      assertEquals(a1, a2);
+      assertFalse(a1.equals(b));
+      QueryUtils.check(a1);
+    }
   }
 }
